// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file video_frame.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "video_frame.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

VideoFrame::VideoFrame()
{
    // m_timestamp_us com.eprosima.idl.parser.typecode.PrimitiveTypeCode@df27fae
    m_timestamp_us = 0;
    // m_format com.eprosima.idl.parser.typecode.StringTypeCode@24a35978
    m_format ="";
    // m_data com.eprosima.idl.parser.typecode.SequenceTypeCode@16f7c8c1


}

VideoFrame::~VideoFrame()
{



}

VideoFrame::VideoFrame(
        const VideoFrame& x)
{
    m_timestamp_us = x.m_timestamp_us;
    m_format = x.m_format;
    m_data = x.m_data;
}

VideoFrame::VideoFrame(
        VideoFrame&& x)
{
    m_timestamp_us = x.m_timestamp_us;
    m_format = std::move(x.m_format);
    m_data = std::move(x.m_data);
}

VideoFrame& VideoFrame::operator =(
        const VideoFrame& x)
{

    m_timestamp_us = x.m_timestamp_us;
    m_format = x.m_format;
    m_data = x.m_data;

    return *this;
}

VideoFrame& VideoFrame::operator =(
        VideoFrame&& x)
{

    m_timestamp_us = x.m_timestamp_us;
    m_format = std::move(x.m_format);
    m_data = std::move(x.m_data);

    return *this;
}

bool VideoFrame::operator ==(
        const VideoFrame& x) const
{

    return (m_timestamp_us == x.m_timestamp_us && m_format == x.m_format && m_data == x.m_data);
}

bool VideoFrame::operator !=(
        const VideoFrame& x) const
{
    return !(*this == x);
}

size_t VideoFrame::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + 255 + 1;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += (100 * 1) + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);




    return current_alignment - initial_alignment;
}

size_t VideoFrame::getCdrSerializedSize(
        const VideoFrame& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.format().size() + 1;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    if (data.data().size() > 0)
    {
        current_alignment += (data.data().size() * 1) + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);
    }




    return current_alignment - initial_alignment;
}

void VideoFrame::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_timestamp_us;
    scdr << m_format;
    scdr << m_data;

}

void VideoFrame::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_timestamp_us;
    dcdr >> m_format;
    dcdr >> m_data;
}

/*!
 * @brief This function sets a value in member timestamp_us
 * @param _timestamp_us New value for member timestamp_us
 */
void VideoFrame::timestamp_us(
        uint64_t _timestamp_us)
{
    m_timestamp_us = _timestamp_us;
}

/*!
 * @brief This function returns the value of member timestamp_us
 * @return Value of member timestamp_us
 */
uint64_t VideoFrame::timestamp_us() const
{
    return m_timestamp_us;
}

/*!
 * @brief This function returns a reference to member timestamp_us
 * @return Reference to member timestamp_us
 */
uint64_t& VideoFrame::timestamp_us()
{
    return m_timestamp_us;
}

/*!
 * @brief This function copies the value in member format
 * @param _format New value to be copied in member format
 */
void VideoFrame::format(
        const std::string& _format)
{
    m_format = _format;
}

/*!
 * @brief This function moves the value in member format
 * @param _format New value to be moved in member format
 */
void VideoFrame::format(
        std::string&& _format)
{
    m_format = std::move(_format);
}

/*!
 * @brief This function returns a constant reference to member format
 * @return Constant reference to member format
 */
const std::string& VideoFrame::format() const
{
    return m_format;
}

/*!
 * @brief This function returns a reference to member format
 * @return Reference to member format
 */
std::string& VideoFrame::format()
{
    return m_format;
}
/*!
 * @brief This function copies the value in member data
 * @param _data New value to be copied in member data
 */
void VideoFrame::data(
        const std::vector<char>& _data)
{
    m_data = _data;
}

/*!
 * @brief This function moves the value in member data
 * @param _data New value to be moved in member data
 */
void VideoFrame::data(
        std::vector<char>&& _data)
{
    m_data = std::move(_data);
}

/*!
 * @brief This function returns a constant reference to member data
 * @return Constant reference to member data
 */
const std::vector<char>& VideoFrame::data() const
{
    return m_data;
}

/*!
 * @brief This function returns a reference to member data
 * @return Reference to member data
 */
std::vector<char>& VideoFrame::data()
{
    return m_data;
}

size_t VideoFrame::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;






    return current_align;
}

bool VideoFrame::isKeyDefined()
{
    return false;
}

void VideoFrame::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
       
}
